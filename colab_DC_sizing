{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMbAKKYlO+OVQTAIdyxoDYH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PedroSGui/Cable-dimencioning-tool/blob/main/IT_Power_Lineup_%26_Equipment_Sizing_N%2B1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c7630100"
      },
      "source": [
        "# Install the google-generativeai library\n",
        "!pip install -q -U google-generativeai"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b44d8386"
      },
      "source": [
        "This cell defines the parameters, helper functions, and two main classes (`DataCenterCalculations` and `MVRingSizing`) to perform the data center electrical system calculations.\n",
        "\n",
        "- **Parameters**: Sets the default values for IT load, mechanical and house loads, voltage, busbar capacity, redundancy topology, load distribution, power factors, reserve percentages, battery details, and MV voltage and RMU ratings.\n",
        "- **Helper Functions**:\n",
        "    - `calculate_mechanical_load`: Calculates mechanical load based on either a ratio of IT load or a specified PUE.\n",
        "    - `effective_transformers`: Determines the number of transformers actively contributing to the Minimum Import Capacity (MIC) based on the selected redundancy topology.\n",
        "    - `nearest_standard_rmu`: Finds the smallest standard Ring Main Unit (RMU) current rating that is greater than or equal to the calculated required current.\n",
        "- **`DataCenterCalculations` Class**:\n",
        "    - Takes the data center parameters as input.\n",
        "    - The `_perform_calculations` method calculates:\n",
        "        - Total facility load.\n",
        "        - Total kVA and current required based on the load distribution (`included_in_it` or `separate_lineups`).\n",
        "        - Number of duty and total lineups for both IT and (if separate) mechanical/house loads.\n",
        "        - Equipment sizing (kW and kVA) for generators, transformers, UPS, and rectifiers per lineup, including reserve capacity.\n",
        "        - Battery capacity required based on autonomy, UPS load, and efficiency.\n",
        "        - Power Usage Effectiveness (PUE).\n",
        "    - The `display_summary` method prints a detailed summary of the calculated data center loadings and equipment sizing.\n",
        "- **`MVRingSizing` Class**:\n",
        "    - Takes the results from `DataCenterCalculations`, MV voltage, and standard RMU ratings as input.\n",
        "    - The `_perform_sizing` method calculates:\n",
        "        - Installed kVA capacity of transformers for both IT and mechanical/house loads.\n",
        "        - Minimum Import Capacity (MIC) required based on the effective number of transformers considering redundancy.\n",
        "        - Total MV import current and per-feeder current.\n",
        "        - Recommended RMU rating based on the worst-case normal operating current.\n",
        "    - The `display_summary` method prints a summary of the MV ring sizing results.\n",
        "- **Main Execution Block**:\n",
        "    - Defines input variables using the parameters set at the top of the cell.\n",
        "    - Creates instances of `DataCenterCalculations` and `MVRingSizing`, passing the relevant inputs.\n",
        "    - Calls the `display_summary` method for both calculation classes to print the results.\n",
        "    - Makes the calculated variables globally available for use in subsequent cells (like visualization and the final report)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e720c08f",
        "outputId": "e879a98d-d14e-4457-96e3-c890996c962a"
      },
      "source": [
        "import math\n",
        "\n",
        "# -----------------------------\n",
        "# Default Parameters (modifiable)\n",
        "# -----------------------------\n",
        "# These parameters define the characteristics of the data center and its electrical system.\n",
        "it_load_mw = 5.0                # IT load in MW (Megawatts) - the power consumed by the IT equipment.\n",
        "mechanical_load_mw = 1.0        # Mechanical load in MW - power consumed by cooling systems, fans, etc.\n",
        "house_load_mw = 0.5             # House load in MW - power for lighting, office spaces, etc.\n",
        "voltage = 400                   # Line-to-line voltage in volts (V) at the low voltage distribution.\n",
        "busbar_max_current = 4000       # Maximum continuous current in Amperes (A) that each lineup's busbar can handle.\n",
        "topology = \"N+1\"                # Electrical redundancy configuration. Options: \"N+1\", \"N+2\", \"2N\", \"2N+1\".\n",
        "mechanical_ratio = None          # Optional: Allows defining mechanical load as a fraction of IT load (e.g., 0.4 = 40%). If used, mechanical_load_mw above is ignored.\n",
        "pue = None                       # Optional: Power Usage Effectiveness. If provided, mechanical and house loads are calculated based on this value and IT load. If used, mechanical_load_mw and house_load_mw above are ignored.\n",
        "\n",
        "# Add new parameter for load distribution\n",
        "load_distribution = \"included_in_it\"  # Determines how mechanical and house loads are distributed. Options: \"included_in_it\" (shared lineups with IT), \"separate_lineups\" (dedicated lineups).\n",
        "\n",
        "pf_generator = 0.8              # Power Factor (PF) assumed for generators.\n",
        "pf_transformer = 0.95           # Power Factor (PF) assumed for transformers and other downstream equipment.\n",
        "\n",
        "generator_reserve_pct = 10      # Reserve capacity percentage for generators.\n",
        "transformer_reserve_pct = 10    # Reserve capacity percentage for transformers.\n",
        "ups_reserve_pct = 10            # Reserve capacity percentage for Uninterruptible Power Supplies (UPS).\n",
        "rectifier_reserve_pct = 10      # Reserve capacity percentage for UPS rectifiers (AC to DC conversion).\n",
        "\n",
        "battery_technology = \"li-ion\"   # Type of battery technology used. Affects efficiency.\n",
        "battery_autonomy_min = 15       # Minimum runtime required from batteries during a power outage in minutes.\n",
        "battery_voltage_dc = 480        # DC voltage of the battery system in volts.\n",
        "battery_efficiency = 0.95 if battery_technology.lower() == \"li-ion\" else 0.85 # Efficiency of the battery system during discharge.\n",
        "\n",
        "# -----------------------------\n",
        "# Helper Functions\n",
        "# -----------------------------\n",
        "\n",
        "def calculate_mechanical_load(it_load_mw, house_load_mw, pue=None, mech_ratio=None):\n",
        "    \"\"\"\n",
        "    Calculate the mechanical load of the data center.\n",
        "    Either provide PUE or mech_ratio (% of IT load).\n",
        "    Assumes house_load_mw is provided separately.\n",
        "    \"\"\"\n",
        "    if mech_ratio is not None:\n",
        "        return it_load_mw * mech_ratio\n",
        "    elif pue is not None:\n",
        "        if it_load_mw <= 0:\n",
        "             return 0.0 # Avoid division by zero if IT load is 0\n",
        "        total_facility_load = it_load_mw * pue\n",
        "        mechanical_load = total_facility_load - it_load_mw - house_load_mw\n",
        "        return mechanical_load\n",
        "    else:\n",
        "        # If neither is provided, assume mechanical_load_mw is set externally\n",
        "        # In this case, this function should probably not be called to avoid overwriting the external value.\n",
        "        # We will handle this in the main calculation block.\n",
        "        raise ValueError(\"Provide either PUE or mechanical load ratio to calculate mechanical load.\")\n",
        "\n",
        "\n",
        "def effective_transformers(count, topology):\n",
        "    \"\"\"Return effective number of transformers contributing to MIC based on redundancy topology.\"\"\"\n",
        "    t = topology.strip().upper()\n",
        "    if t == \"N+1\":\n",
        "        return max(count - 1, 0)   # one spare, can be 0 if only 1 installed\n",
        "    elif t == \"N+2\":\n",
        "        return max(count - 2, 0)  # two spares, can be 0 if only 1 or 2 installed\n",
        "    elif t == \"2N\":\n",
        "        return count // 2          # half are redundant\n",
        "    elif t == \"2N+1\":\n",
        "        return max(count - (count // 2) - 1, 0) # N+1 configuration of the 2N+1 system\n",
        "    else:  # plain N or unknown\n",
        "        return count # Assuming N means no redundancy for MIC calculation\n",
        "\n",
        "def nearest_standard_rmu(current_a, standard_ratings):\n",
        "    \"\"\"Find the nearest standard RMU rating greater than or equal to the required current.\"\"\"\n",
        "    for rating in standard_ratings:\n",
        "        if current_a <= rating:\n",
        "            return rating\n",
        "    return standard_ratings[-1] # Return the largest if required current exceeds all standards\n",
        "\n",
        "\n",
        "# -----------------------------\n",
        "# Data Center Calculation Class\n",
        "# -----------------------------\n",
        "class DataCenterCalculations:\n",
        "    def __init__(self, it_load_mw, mechanical_load_mw, house_load_mw, voltage,\n",
        "                 busbar_max_current, topology, load_distribution,\n",
        "                 pf_generator, pf_transformer, generator_reserve_pct,\n",
        "                 transformer_reserve_pct, ups_reserve_pct, rectifier_reserve_pct,\n",
        "                 battery_technology, battery_autonomy_min, battery_voltage_dc,\n",
        "                 battery_efficiency, mechanical_ratio=None, pue=None):\n",
        "\n",
        "        # Store input parameters\n",
        "        self.it_load_mw = it_load_mw\n",
        "        self.mechanical_load_mw = mechanical_load_mw\n",
        "        self.house_load_mw = house_load_mw\n",
        "        self.voltage = voltage\n",
        "        self.busbar_max_current = busbar_max_current\n",
        "        self.topology = topology.upper()\n",
        "        self.load_distribution = load_distribution\n",
        "        self.pf_generator = pf_generator\n",
        "        self.pf_transformer = pf_transformer\n",
        "        self.generator_reserve_pct = generator_reserve_pct\n",
        "        self.transformer_reserve_pct = transformer_reserve_pct\n",
        "        self.ups_reserve_pct = ups_reserve_pct\n",
        "        self.rectifier_reserve_pct = rectifier_reserve_pct\n",
        "        self.battery_technology = battery_technology\n",
        "        self.battery_autonomy_min = battery_autonomy_min\n",
        "        self.battery_voltage_dc = battery_voltage_dc\n",
        "        self.battery_efficiency = battery_efficiency # Efficiency is set in input parameters now\n",
        "\n",
        "        self.mechanical_ratio = mechanical_ratio\n",
        "        self.pue = pue\n",
        "\n",
        "        # Initialize calculated values\n",
        "        self.total_facility_load_mw = 0\n",
        "        self.total_kva = 0\n",
        "        self.total_current = 0\n",
        "        self.duty_lineups = 0\n",
        "        self.current_per_lineup = 0\n",
        "        self.reserve_lineup = 0\n",
        "        self.total_lineups = 0\n",
        "        self.mech_house_total_mw = 0\n",
        "        self.mech_house_pf = 0.9 # Default Mech/House power factor\n",
        "        self.mech_house_total_kva = 0\n",
        "        self.mech_house_total_current = 0\n",
        "        self.mech_house_duty_lineups = 0\n",
        "        self.mech_house_total_lineups = 0\n",
        "        self.load_per_lineup_kw = 0\n",
        "        self.generator_kw_per_unit = 0\n",
        "        self.generator_kva_per_unit = 0\n",
        "        self.transformer_kw_per_unit = 0\n",
        "        self.transformer_kva_per_unit = 0\n",
        "        self.ups_kw_per_unit = 0\n",
        "        self.ups_kva_per_unit = 0\n",
        "        self.rectifier_kw_per_unit = 0\n",
        "        self.rectifier_kva_per_unit = 0\n",
        "        self.battery_dc_power_kw = 0\n",
        "        self.battery_capacity_kwh = 0\n",
        "        self.battery_capacity_ah = 0\n",
        "        self.calculated_pue = 0\n",
        "\n",
        "        self.mech_house_gen_kw_per_unit = 0 # Added for separate lineups\n",
        "        self.mech_house_gen_kva_per_unit = 0 # Added for separate lineups\n",
        "        self.mech_house_transformer_kw_per_unit = 0 # Added for separate lineups\n",
        "        self.mech_house_transformer_kva_per_unit = 0 # Added for separate lineups\n",
        "\n",
        "\n",
        "        self._perform_calculations()\n",
        "\n",
        "    def _perform_calculations(self):\n",
        "        \"\"\"Perform all data center load and equipment sizing calculations.\"\"\"\n",
        "\n",
        "        # Determine Mechanical Load based on method\n",
        "        calculated_mech_load = self.mechanical_load_mw # Start with the explicit value\n",
        "        if self.mechanical_ratio is not None or self.pue is not None:\n",
        "             # If ratio or PUE is provided, calculate mechanical load using the helper function\n",
        "             try:\n",
        "                 calculated_mech_load = calculate_mechanical_load(self.it_load_mw, self.house_load_mw, pue=self.pue, mech_ratio=self.mechanical_ratio)\n",
        "             except ValueError as e:\n",
        "                 print(f\"Error calculating mechanical load: {e}\")\n",
        "                 # Decide how to handle this error - maybe default to explicit value or exit\n",
        "                 pass # Continue with the explicit value if calculation fails\n",
        "\n",
        "\n",
        "        self.total_facility_load_mw = self.it_load_mw + calculated_mech_load + self.house_load_mw\n",
        "\n",
        "        # Adjust calculations based on load_distribution\n",
        "        if self.load_distribution == \"included_in_it\":\n",
        "            # Total load in kVA (assuming a power factor for the total facility load)\n",
        "            # Using pf_transformer as a general power factor for the total load for simplicity\n",
        "            self.total_kva = self.total_facility_load_mw * 1000 / self.pf_transformer if self.pf_transformer > 0 else float('inf')\n",
        "            # Total current required based on total load\n",
        "            self.total_current = self.total_kva * 1000 / (self.voltage * math.sqrt(3)) if self.voltage * math.sqrt(3) > 0 else float('inf')\n",
        "            # Number of duty lineups based on total current\n",
        "            self.duty_lineups = math.ceil(self.total_current / self.busbar_max_current) if self.busbar_max_current > 0 else float('inf')\n",
        "            self.current_per_lineup = self.total_current / self.duty_lineups if self.duty_lineups > 0 else 0\n",
        "\n",
        "            # Mechanical and House loads are included in IT lineups, so no separate lineups\n",
        "            self.mech_house_total_mw = 0\n",
        "            self.mech_house_total_kva = 0\n",
        "            self.mech_house_total_current = 0\n",
        "            self.mech_house_duty_lineups = 0\n",
        "            self.mech_house_total_lineups = 0\n",
        "        else: # load_distribution == \"separate_lineups\"\n",
        "            # Total IT load in kVA (remains based on IT load)\n",
        "            self.total_kva = self.it_load_mw * 1000\n",
        "            # Total current required (based on IT load path for downstream equipment sizing)\n",
        "            self.total_current = self.total_kva * 1000 / (self.voltage * math.sqrt(3)) if self.voltage * math.sqrt(3) > 0 else float('inf')\n",
        "            # Number of duty lineups (based on IT load path)\n",
        "            self.duty_lineups = math.ceil(self.total_current / self.busbar_max_current) if self.busbar_max_current > 0 else float('inf')\n",
        "            self.current_per_lineup = self.total_current / self.duty_lineups if self.duty_lineups > 0 else 0\n",
        "\n",
        "            # Calculate separate lineups for Mechanical and House loads\n",
        "            self.mech_house_total_mw = calculated_mech_load + self.house_load_mw\n",
        "            # mech_house_pf is set in __init__\n",
        "            self.mech_house_total_kva = self.mech_house_total_mw * 1000 / self.mech_house_pf if self.mech_house_pf > 0 else float('inf')\n",
        "            self.mech_house_total_current = self.mech_house_total_kva * 1000 / (self.voltage * math.sqrt(3)) if self.voltage * math.sqrt(3) > 0 else float('inf')\n",
        "            self.mech_house_duty_lineups = math.ceil(self.mech_house_total_current / self.busbar_max_current) if self.busbar_max_current > 0 else float('inf')\n",
        "            # Assuming N+1 topology for mechanical/house lineups for now, this can be a separate parameter later\n",
        "            self.mech_house_total_lineups = self.mech_house_duty_lineups + 1 if self.mech_house_duty_lineups > 0 else 0\n",
        "\n",
        "            # Calculate equipment sizing for Mech/House lineups if separate\n",
        "            if self.mech_house_duty_lineups > 0:\n",
        "                 mech_house_kw_per_lineup = self.mech_house_total_mw * 1000 / self.mech_house_duty_lineups\n",
        "                 self.mech_house_gen_kw_per_unit = mech_house_kw_per_lineup * (1 + self.generator_reserve_pct / 100)\n",
        "                 self.mech_house_gen_kva_per_unit = self.mech_house_gen_kw_per_unit / self.pf_generator if self.pf_generator > 0 else float('inf')\n",
        "                 self.mech_house_transformer_kw_per_unit = mech_house_kw_per_lineup * (1 + self.transformer_reserve_pct / 100)\n",
        "                 self.mech_house_transformer_kva_per_unit = self.mech_house_transformer_kw_per_unit / self.pf_transformer if self.pf_transformer > 0 else float('inf')\n",
        "\n",
        "\n",
        "        # Determine total lineups and reserve based on topology (based on IT load path)\n",
        "        if self.topology == \"N+1\":\n",
        "            self.reserve_lineup = 1\n",
        "            self.total_lineups = self.duty_lineups + self.reserve_lineup\n",
        "        elif self.topology == \"N+2\":\n",
        "            self.reserve_lineup = 2\n",
        "            self.total_lineups = self.duty_lineups + self.reserve_lineup\n",
        "        elif self.topology == \"2N\":\n",
        "            self.reserve_lineup = self.duty_lineups\n",
        "            self.total_lineups = self.duty_lineups * 2\n",
        "        elif self.topology == \"2N+1\":\n",
        "            self.reserve_lineup = self.duty_lineups + 1\n",
        "            self.total_lineups = self.duty_lineups * 2 + 1\n",
        "        else:\n",
        "            raise ValueError(\"Invalid topology. Options: N+1, N+2, 2N, 2N+1\")\n",
        "\n",
        "        # -----------------------------\n",
        "        # Equipment Sizing (based on load per lineup)\n",
        "        # -----------------------------\n",
        "        if self.load_distribution == \"included_in_it\":\n",
        "            # Load per lineup kW (based on total load)\n",
        "            self.load_per_lineup_kw = self.total_facility_load_mw * 1000 / self.duty_lineups if self.duty_lineups > 0 else 0\n",
        "        else: # load_distribution == \"separate_lineups\"\n",
        "            # Load per lineup kW (based on IT load path)\n",
        "            self.load_per_lineup_kw = (self.total_kva * self.pf_transformer) / self.duty_lineups if self.duty_lineups > 0 and self.pf_transformer > 0 else 0 # This assumes transformer PF applies to the kVA\n",
        "\n",
        "        # Generator sizing (kW first, then kVA)\n",
        "        self.generator_kw_per_unit = self.load_per_lineup_kw * (1 + self.generator_reserve_pct / 100)\n",
        "        self.generator_kva_per_unit = self.generator_kw_per_unit / self.pf_generator if self.pf_generator > 0 else float('inf')\n",
        "\n",
        "        # Transformer sizing (kW first, then kVA)\n",
        "        self.transformer_kw_per_unit = self.load_per_lineup_kw * (1 + self.transformer_reserve_pct / 100)\n",
        "        self.transformer_kva_per_unit = self.transformer_kw_per_unit / self.pf_transformer if self.pf_transformer > 0 else float('inf')\n",
        "\n",
        "        # UPS sizing\n",
        "        self.ups_kw_per_unit = self.load_per_lineup_kw * (1 + self.ups_reserve_pct / 100)\n",
        "        self.ups_kva_per_unit = self.ups_kw_per_unit / self.pf_transformer if self.pf_transformer > 0 else float('inf') # Assuming PF applies to the kVA\n",
        "\n",
        "        # Rectifier sizing\n",
        "        self.rectifier_kw_per_unit = self.ups_kw_per_unit * (1 + self.rectifier_reserve_pct / 100)\n",
        "        self.rectifier_kva_per_unit = self.rectifier_kw_per_unit / self.pf_transformer if self.pf_transformer > 0 else float('inf') # Assuming PF applies to the kVA\n",
        "\n",
        "        # -----------------------------\n",
        "        # Battery sizing (minutes)\n",
        "        # -----------------------------\n",
        "        self.battery_dc_power_kw = self.ups_kw_per_unit # Battery supports the UPS load\n",
        "        self.battery_capacity_kwh = self.battery_dc_power_kw * (self.battery_autonomy_min / 60) / self.battery_efficiency if self.battery_efficiency > 0 else float('inf')\n",
        "        self.battery_capacity_ah = (self.battery_capacity_kwh * 1000) / self.battery_voltage_dc if self.battery_voltage_dc > 0 else float('inf')\n",
        "\n",
        "        # -----------------------------\n",
        "        # PUE Calculation\n",
        "        # -----------------------------\n",
        "        # PUE = Total Facility Energy / IT Equipment Energy\n",
        "        # Assuming MW represents power demand, and we are interested in PUE at a given load point.\n",
        "        # For energy PUE, you would integrate power over time. Here we calculate instantaneous PUE based on power.\n",
        "        self.calculated_pue = self.total_facility_load_mw / self.it_load_mw if self.it_load_mw > 0 else float('inf')\n",
        "\n",
        "\n",
        "    def display_summary(self):\n",
        "        \"\"\"Display the data center calculation summary.\"\"\"\n",
        "        print(\"\\n===== Data Hall Calculation Summary =====\")\n",
        "        print(f\"Topology: {self.topology}\")\n",
        "        print(f\"Load Distribution: {self.load_distribution}\")\n",
        "        print(f\"IT Load:           {self.it_load_mw:.2f} MW\")\n",
        "        print(f\"Mechanical Load:   {self.mechanical_load_mw:.2f} MW\")\n",
        "        print(f\"House Load:        {self.house_load_mw:.2f} MW\")\n",
        "        print(f\"Total Facility:    {self.total_facility_load_mw:.2f} MW\")\n",
        "        print(f\"Calculated PUE: {self.calculated_pue:.2f}\")\n",
        "\n",
        "        if self.load_distribution == \"included_in_it\":\n",
        "            print(f\"\\nTotal Load (IT + Mech + House): {self.total_kva:.0f} kVA\")\n",
        "            print(f\"Total Current Required: {self.total_current:.0f} A\")\n",
        "            print(f\"Number of Duty Lineups (N): {self.duty_lineups}\")\n",
        "            print(f\"Current per Duty Lineup: {self.current_per_lineup:.0f} A\")\n",
        "            print(f\"Reserve Lineup(s): {self.reserve_lineup}\")\n",
        "            print(f\"Total Lineups: {self.total_lineups}\")\n",
        "        else: # load_distribution == \"separate_lineups\"\n",
        "            print(f\"\\nIT Load: {self.total_kva:.0f} kVA\")\n",
        "            print(f\"IT Current Required: {self.total_current:.0f} A\")\n",
        "            print(f\"IT Duty Lineups (N): {self.duty_lineups}\")\n",
        "            print(f\"IT Current per Duty Lineup: {self.current_per_lineup:.0f} A\")\n",
        "            print(f\"IT Reserve Lineup(s): {self.reserve_lineup}\")\n",
        "            print(f\"Total IT Lineups: {self.total_lineups}\")\n",
        "\n",
        "            print(f\"\\nMechanical & House Load: {self.mech_house_total_kva:.0f} kVA\")\n",
        "            print(f\"Mechanical & House Current Required: {self.mech_house_total_current:.0f} A\")\n",
        "            print(f\"Mechanical & House Duty Lineups: {self.mech_house_duty_lineups}\")\n",
        "            print(f\"Mechanical & House Total Lineups: {self.mech_house_total_lineups}\")\n",
        "            if self.mech_house_total_lineups > 0:\n",
        "                 print(f\"  - Generator Size (per unit): {self.mech_house_gen_kw_per_unit:,.0f} kW / {self.mech_house_gen_kva_per_unit:,.0f} kVA\")\n",
        "                 print(f\"  - Transformer Size (per unit): {self.mech_house_transformer_kw_per_unit:,.0f} kW / {self.mech_house_transformer_kva_per_unit:,.0f} kVA\")\n",
        "\n",
        "\n",
        "        print(\"\\n===== Equipment Sizing (per IT lineup) =====\") # Clarify this is for IT lineups\n",
        "        print(f\"Generators: {self.total_lineups} units\")\n",
        "        print(f\" - Size: {self.generator_kw_per_unit:.0f} kW / {self.generator_kva_per_unit:.0f} kVA (PF={self.pf_generator})\")\n",
        "\n",
        "        print(f\"Transformers: {self.total_lineups} units\")\n",
        "        print(f\" - Size: {self.transformer_kw_per_unit:.0f} kW / {self.transformer_kva_per_unit:.0f} kVA (PF={self.pf_transformer})\")\n",
        "\n",
        "        print(f\"UPS: {self.total_lineups} units\")\n",
        "        print(f\" - Size: {self.ups_kw_per_unit:.0f} kW / {self.ups_kva_per_unit:.0f} kVA (PF={self.pf_transformer})\")\n",
        "\n",
        "        print(f\"Rectifiers: {self.total_lineups} units\")\n",
        "        print(f\" - Size: {self.rectifier_kw_per_unit:.0f} kW / {self.rectifier_kva_per_unit:.0f} kVA (PF={self.pf_transformer})\")\n",
        "\n",
        "        print(f\"Batteries ({self.battery_technology}):\")\n",
        "        print(f\" - Required autonomy: {self.battery_autonomy_min:.0f} minutes\")\n",
        "        print(f\" - Total capacity: {self.battery_capacity_kwh:.0f} kWh / {self.battery_capacity_ah:.0f} Ah\")\n",
        "\n",
        "        print(\"\\nLineup Distribution per Source (Utility / Generator / UPS):\")\n",
        "        sources = [\"Utility\", \"Generator\", \"UPS\"]\n",
        "        for source in sources:\n",
        "            print(f\"{source}: {self.total_lineups} IT lineups total\") # Clarify this is for IT lineups\n",
        "\n",
        "\n",
        "# -----------------------------\n",
        "# MV Ring Sizing Calculation\n",
        "# -----------------------------\n",
        "class MVRingSizing:\n",
        "    def __init__(self, dc_calc_results, mv_voltage_kv, standard_rmu_ratings):\n",
        "        self.dc_calc = dc_calc_results\n",
        "        self.mv_voltage_kv = mv_voltage_kv\n",
        "        self.standard_rmu_ratings = standard_rmu_ratings\n",
        "\n",
        "        self.installed_kva_it = 0\n",
        "        self.effective_units_it = 0\n",
        "        self.mic_kva_it = 0\n",
        "        self.installed_kva_mech_house = 0\n",
        "        self.effective_units_mech_house = 0\n",
        "        self.mic_kva_mech_house = 0\n",
        "        self.installed_kva = 0\n",
        "        self.mic_kva = 0\n",
        "        self.site_import_current_a = 0\n",
        "        self.per_feeder_current_a = 0\n",
        "        self.worst_normal_current_a = 0\n",
        "        self.rmu_rating_a = 0\n",
        "\n",
        "        self._perform_sizing()\n",
        "\n",
        "    def _perform_sizing(self):\n",
        "        \"\"\"Perform MV ring sizing calculations.\"\"\"\n",
        "\n",
        "        # --- IT Transformer Sizing ---\n",
        "        self.installed_kva_it = self.dc_calc.transformer_kva_per_unit * self.dc_calc.total_lineups\n",
        "        self.effective_units_it = effective_transformers(self.dc_calc.total_lineups, self.dc_calc.topology)\n",
        "        self.mic_kva_it = self.dc_calc.transformer_kva_per_unit * self.effective_units_it\n",
        "\n",
        "        # --- Mech/House Transformer Sizing (if separate) ---\n",
        "        if self.dc_calc.load_distribution == \"separate_lineups\" and self.dc_calc.mech_house_total_lineups > 0:\n",
        "            # Assuming N+1 for Mech/House transformers for MIC calculation\n",
        "            self.effective_units_mech_house = effective_transformers(self.dc_calc.mech_house_total_lineups, \"N+1\")\n",
        "            # Need the kva per unit for Mech/House transformers from dc_calc\n",
        "            self.installed_kva_mech_house = self.dc_calc.mech_house_transformer_kva_per_unit * self.dc_calc.mech_house_total_lineups\n",
        "            self.mic_kva_mech_house = self.dc_calc.mech_house_transformer_kva_per_unit * self.effective_units_mech_house\n",
        "\n",
        "\n",
        "        # --- Total Installed and MIC kVA ---\n",
        "        self.installed_kva = self.installed_kva_it + self.installed_kva_mech_house\n",
        "        self.mic_kva = self.mic_kva_it + self.mic_kva_mech_house\n",
        "\n",
        "\n",
        "        # --- MV import current ---\n",
        "        mv_v = self.mv_voltage_kv * 1e3\n",
        "        self.site_import_current_a = self.mic_kva * 1e3 / (math.sqrt(3) * mv_v) if mv_v > 0 else float('inf')\n",
        "        self.per_feeder_current_a = self.site_import_current_a / 2.0 # Assuming a ring with two feeders\n",
        "        self.worst_normal_current_a = max(self.site_import_current_a, self.per_feeder_current_a) # Worst case is typically the total import\n",
        "\n",
        "        # --- RMU Rating ---\n",
        "        self.rmu_rating_a = nearest_standard_rmu(self.worst_normal_current_a, self.standard_rmu_ratings)\n",
        "\n",
        "\n",
        "    def display_summary(self):\n",
        "        \"\"\"Display the MV ring sizing summary.\"\"\"\n",
        "        print(\"\\n=== MV RING SIZING RESULTS ===\")\n",
        "        print(f\"MV voltage (kV):                 {self.mv_voltage_kv:.2f}\")\n",
        "        print(f\"Topology:                        {self.dc_calc.topology}\")\n",
        "        print(f\"Load Distribution:               {self.dc_calc.load_distribution}\")\n",
        "        print()\n",
        "        print(f\"IT Transformers installed:       {self.dc_calc.total_lineups}\")\n",
        "        print(f\"IT Transformer size per unit (kVA): {self.dc_calc.transformer_kva_per_unit:,.0f}\")\n",
        "        if self.dc_calc.load_distribution == \"separate_lineups\" and self.dc_calc.mech_house_total_lineups > 0:\n",
        "            print(f\"Mech/House Transformers installed: {self.dc_calc.mech_house_total_lineups}\")\n",
        "            print(f\"Mech/House Transformer size per unit (kVA): {self.dc_calc.mech_house_transformer_kva_per_unit:,.0f}\")\n",
        "        print()\n",
        "        print(f\"=> MIC required (kVA):           {self.mic_kva:,.0f}\")\n",
        "        print(f\"(Total installed capacity:        {self.installed_kva:,.0f} kVA)\")\n",
        "        print()\n",
        "        print(f\"Total MV import current (A):     {self.site_import_current_a:,.1f}\")\n",
        "        print(f\"Per-feeder current (A):          {self.per_feeder_current_a:,.1f}\")\n",
        "        print(f\"Recommended RMU rating:          {self.rmu_rating_a} A\")\n",
        "\n",
        "        print(\"\\nNOTES:\")\n",
        "        print(\"- MIC is based on effective transformers considering redundancy topology.\")\n",
        "        print(\"- RMU rating checked against continuous current; utility fault level still to be verified.\")\n",
        "        print(\"- If ring operated open (radial), feeders must be rated for full import current.\")\n",
        "\n",
        "\n",
        "# -----------------------------\n",
        "# Main Execution\n",
        "# -----------------------------\n",
        "\n",
        "# Define input parameters (can be modified by the user)\n",
        "it_load_mw_input = 5.0\n",
        "mechanical_load_mw_input = 1.0\n",
        "house_load_mw_input = 0.5\n",
        "voltage_input = 400\n",
        "busbar_max_current_input = 4000\n",
        "topology_input = \"N+1\"\n",
        "load_distribution_input = \"included_in_it\" # \"included_in_it\" or \"separate_lineups\"\n",
        "mechanical_ratio_input = None # Set to a value like 0.4 to use ratio\n",
        "pue_input = None # Set to a value like 1.3 to use PUE\n",
        "\n",
        "pf_generator_input = 0.8\n",
        "pf_transformer_input = 0.95\n",
        "generator_reserve_pct_input = 10\n",
        "transformer_reserve_pct_input = 10\n",
        "ups_reserve_pct_input = 10\n",
        "rectifier_reserve_pct_input = 10\n",
        "\n",
        "battery_technology_input = \"li-ion\"\n",
        "battery_autonomy_min_input = 15\n",
        "battery_voltage_dc_input = 480\n",
        "battery_efficiency_input = 0.95 if battery_technology_input.lower() == \"li-ion\" else 0.85\n",
        "\n",
        "MV_VOLTAGE_KV_input = 11.0\n",
        "STANDARD_RMU_CONT_CURRENT_A_input = [400, 630, 800, 1000, 1250]\n",
        "\n",
        "\n",
        "# Perform Data Center Calculations\n",
        "dc_calc_results = DataCenterCalculations(\n",
        "    it_load_mw=it_load_mw_input,\n",
        "    mechanical_load_mw=mechanical_load_mw_input,\n",
        "    house_load_mw=house_load_mw_input,\n",
        "    voltage=voltage_input,\n",
        "    busbar_max_current=busbar_max_current_input,\n",
        "    topology=topology_input,\n",
        "    load_distribution=load_distribution_input,\n",
        "    pf_generator=pf_generator_input,\n",
        "    pf_transformer=pf_transformer_input,\n",
        "    generator_reserve_pct=generator_reserve_pct_input,\n",
        "    transformer_reserve_pct=transformer_reserve_pct_input,\n",
        "    ups_reserve_pct=ups_reserve_pct_input,\n",
        "    rectifier_reserve_pct=rectifier_reserve_pct_input,\n",
        "    battery_technology=battery_technology_input,\n",
        "    battery_autonomy_min=battery_autonomy_min_input,\n",
        "    battery_voltage_dc=battery_voltage_dc_input,\n",
        "    battery_efficiency=battery_efficiency_input,\n",
        "    mechanical_ratio=mechanical_ratio_input,\n",
        "    pue=pue_input\n",
        ")\n",
        "\n",
        "# Display Data Center Calculation Summary\n",
        "dc_calc_results.display_summary()\n",
        "\n",
        "# Perform MV Ring Sizing\n",
        "mv_ring_sizing_results = MVRingSizing(\n",
        "    dc_calc_results=dc_calc_results,\n",
        "    mv_voltage_kv=MV_VOLTAGE_KV_input,\n",
        "    standard_rmu_ratings=STANDARD_RMU_CONT_CURRENT_A_input\n",
        ")\n",
        "\n",
        "# Display MV Ring Sizing Summary\n",
        "mv_ring_sizing_results.display_summary()\n",
        "\n",
        "# Make calculated values globally available for visualization and report cells\n",
        "# IT Load Path\n",
        "total_kva = dc_calc_results.total_kva\n",
        "total_current = dc_calc_results.total_current\n",
        "duty_lineups = dc_calc_results.duty_lineups\n",
        "current_per_lineup = dc_calc_results.current_per_lineup\n",
        "reserve_lineup = dc_calc_results.reserve_lineup\n",
        "total_lineups = dc_calc_results.total_lineups\n",
        "generator_kw_per_unit = dc_calc_results.generator_kw_per_unit\n",
        "generator_kva_per_unit = dc_calc_results.generator_kva_per_unit\n",
        "transformer_kw_per_unit = dc_calc_results.transformer_kw_per_unit\n",
        "transformer_kva_per_unit = dc_calc_results.transformer_kva_per_unit\n",
        "ups_kw_per_unit = dc_calc_results.ups_kw_per_unit\n",
        "ups_kva_per_unit = dc_calc_results.ups_kva_per_unit\n",
        "rectifier_kw_per_unit = dc_calc_results.rectifier_kw_per_unit\n",
        "rectifier_kva_per_unit = dc_calc_results.rectifier_kva_per_unit\n",
        "battery_capacity_kwh = dc_calc_results.battery_capacity_kwh\n",
        "battery_capacity_ah = dc_calc_results.battery_capacity_ah\n",
        "battery_autonomy_min = dc_calc_results.battery_autonomy_min\n",
        "battery_technology = dc_calc_results.battery_technology\n",
        "total_facility_load_mw = dc_calc_results.total_facility_load_mw\n",
        "calculated_pue = dc_calc_results.calculated_pue\n",
        "pf_generator = dc_calc_results.pf_generator\n",
        "pf_transformer = dc_calc_results.pf_transformer\n",
        "voltage = dc_calc_results.voltage\n",
        "busbar_max_current = dc_calc_results.busbar_max_current\n",
        "generator_reserve_pct = dc_calc_results.generator_reserve_pct\n",
        "transformer_reserve_pct = dc_calc_results.transformer_reserve_pct\n",
        "ups_reserve_pct = dc_calc_results.ups_reserve_pct\n",
        "rectifier_reserve_pct = dc_calc_results.rectifier_reserve_pct\n",
        "battery_voltage_dc = dc_calc_results.battery_voltage_dc\n",
        "battery_efficiency = dc_calc_results.battery_efficiency\n",
        "it_load_mw = dc_calc_results.it_load_mw\n",
        "mechanical_load_mw = dc_calc_results.mechanical_load_mw\n",
        "house_load_mw = dc_calc_results.house_load_mw\n",
        "topology_upper = dc_calc_results.topology\n",
        "load_distribution = dc_calc_results.load_distribution\n",
        "\n",
        "# Mechanical/House Load Path (if separate)\n",
        "mech_house_total_mw = dc_calc_results.mech_house_total_mw\n",
        "mech_house_pf = dc_calc_results.mech_house_pf\n",
        "mech_house_total_kva = dc_calc_results.mech_house_total_kva\n",
        "mech_house_total_current = dc_calc_results.mech_house_total_current\n",
        "mech_house_duty_lineups = dc_calc_results.mech_house_duty_lineups\n",
        "mech_house_total_lineups = dc_calc_results.mech_house_total_lineups\n",
        "\n",
        "# Make Mech/House equipment sizing global if separate\n",
        "if load_distribution == \"separate_lineups\" and mech_house_total_lineups > 0:\n",
        "    mech_house_gen_kw_per_unit = dc_calc_results.mech_house_gen_kw_per_unit\n",
        "    mech_house_gen_kva_per_unit = dc_calc_results.mech_house_gen_kva_per_unit\n",
        "    mech_house_transformer_kw_per_unit = dc_calc_results.mech_house_transformer_kw_per_unit\n",
        "    mech_house_transformer_kva_per_unit = dc_calc_results.mech_house_transformer_kva_per_unit\n",
        "    # These are already set as attributes in dc_calc_results, no need to make them global separately\n",
        "    # globals()['mech_house_gen_kw_per_unit'] = mech_house_gen_kw_per_unit\n",
        "    # globals()['mech_house_gen_kva_per_unit'] = mech_house_gen_kva_per_unit\n",
        "    # globals()['mech_house_transformer_kw_per_unit'] = mech_house_transformer_kw_per_unit\n",
        "    # globals()['mech_house_transformer_kva_per_unit'] = mech_house_transformer_kva_per_unit\n",
        "    # globals()['mech_house_pf'] = mech_house_pf\n",
        "\n",
        "# Make MV sizing results global for the report\n",
        "mic_kva = mv_ring_sizing_results.mic_kva\n",
        "installed_kva = mv_ring_sizing_results.installed_kva\n",
        "site_import_current_a = mv_ring_sizing_results.site_import_current_a\n",
        "per_feeder_current_a = mv_ring_sizing_results.per_feeder_current_a\n",
        "rmu_rating_a = mv_ring_sizing_results.rmu_rating_a\n",
        "MV_VOLTAGE_KV = mv_ring_sizing_results.mv_voltage_kv\n",
        "STANDARD_RMU_CONT_CURRENT_A = mv_ring_sizing_results.standard_rmu_ratings"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== Data Hall Calculation Summary =====\n",
            "Topology: N+1\n",
            "Load Distribution: included_in_it\n",
            "IT Load:           5.00 MW\n",
            "Mechanical Load:   1.00 MW\n",
            "House Load:        0.50 MW\n",
            "Total Facility:    6.50 MW\n",
            "Calculated PUE: 1.30\n",
            "\n",
            "Total Load (IT + Mech + House): 6842 kVA\n",
            "Total Current Required: 9876 A\n",
            "Number of Duty Lineups (N): 3\n",
            "Current per Duty Lineup: 3292 A\n",
            "Reserve Lineup(s): 1\n",
            "Total Lineups: 4\n",
            "\n",
            "===== Equipment Sizing (per IT lineup) =====\n",
            "Generators: 4 units\n",
            " - Size: 2383 kW / 2979 kVA (PF=0.8)\n",
            "Transformers: 4 units\n",
            " - Size: 2383 kW / 2509 kVA (PF=0.95)\n",
            "UPS: 4 units\n",
            " - Size: 2383 kW / 2509 kVA (PF=0.95)\n",
            "Rectifiers: 4 units\n",
            " - Size: 2622 kW / 2760 kVA (PF=0.95)\n",
            "Batteries (li-ion):\n",
            " - Required autonomy: 15 minutes\n",
            " - Total capacity: 627 kWh / 1307 Ah\n",
            "\n",
            "Lineup Distribution per Source (Utility / Generator / UPS):\n",
            "Utility: 4 IT lineups total\n",
            "Generator: 4 IT lineups total\n",
            "UPS: 4 IT lineups total\n",
            "\n",
            "=== MV RING SIZING RESULTS ===\n",
            "MV voltage (kV):                 11.00\n",
            "Topology:                        N+1\n",
            "Load Distribution:               included_in_it\n",
            "\n",
            "IT Transformers installed:       4\n",
            "IT Transformer size per unit (kVA): 2,509\n",
            "\n",
            "=> MIC required (kVA):           7,526\n",
            "(Total installed capacity:        10,035 kVA)\n",
            "\n",
            "Total MV import current (A):     395.0\n",
            "Per-feeder current (A):          197.5\n",
            "Recommended RMU rating:          400 A\n",
            "\n",
            "NOTES:\n",
            "- MIC is based on effective transformers considering redundancy topology.\n",
            "- RMU rating checked against continuous current; utility fault level still to be verified.\n",
            "- If ring operated open (radial), feeders must be rated for full import current.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9f745fdb"
      },
      "source": [
        "This cell focuses on visualizing the electrical system based on the calculation results.\n",
        "\n",
        "- **Component Classes**: Defines simple classes (`Component`, `Generator`, `MDB`, `UPS`, `Rack`, `Utility`) to represent the different elements in the electrical system. Each component has a name, type, optional rating, a flag for whether it's a reserve component, and a `load_type` to distinguish between IT and Mechanical/House loads.\n",
        "- **`ElectricalSystem` Class**:\n",
        "    - Stores the system's topology and load distribution.\n",
        "    - `add_component`: Adds a component to a list.\n",
        "    - `connect`: Records a connection between two components.\n",
        "    - `summary`: Prints a list of components and their connections.\n",
        "    - `visualize`: Uses the `networkx` and `matplotlib` libraries to create a visual representation of the electrical system as a directed graph. Nodes are colored based on whether they are reserve components or serve mechanical/house loads. Nodes are positioned in a way that attempts to group them by lineup.\n",
        "- **`build_electrical_system` Function**:\n",
        "    - Takes the `dc_calc_results` object (containing the calculation outputs) as input.\n",
        "    - Creates an `ElectricalSystem` instance.\n",
        "    - Adds components (Utility, Generator, MDB, UPS, Rack/Load) for each duty and reserve lineup, based on the calculated number of lineups and the specified load distribution and topology. The ratings of the components are taken from the calculation results.\n",
        "    - Adds connections between the components to represent the flow of power.\n",
        "    - Returns the built `ElectricalSystem` object.\n",
        "- **Main Execution Block**:\n",
        "    - Calls the `build_electrical_system` function to create the system diagram based on the results from the previous calculation cell.\n",
        "    - Calls the `summary` method of the created `electrical_system` object to print a text summary.\n",
        "    - Calls the `visualize` method to display the graphical representation of the electrical system.\n",
        "    - Includes error handling to ensure the calculation results are available before attempting to build and visualize the system."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9d7a6372",
        "outputId": "0a7ab2f0-224e-4937-dd07-98e62da33fb4"
      },
      "source": [
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ----------------------------\n",
        "# Component Classes\n",
        "# ----------------------------\n",
        "# These classes represent different electrical components in the data center system.\n",
        "class Component:\n",
        "    def __init__(self, name, type, rating_kw=None, rating_kva=None, is_reserve=False, load_type='IT'):\n",
        "        self.name = name # Name of the component (e.g., \"Utility1\", \"G_reserve\")\n",
        "        self.type = type # Type of component (e.g., 'Utility', 'Generator', 'MDB', 'UPS', 'Rack')\n",
        "        self.rating_kw = rating_kw # Power rating in kW (optional)\n",
        "        self.rating_kva = rating_kva # Power rating in kVA (optional)\n",
        "        self.is_reserve = is_reserve # Boolean indicating if this is a reserve component\n",
        "        self.load_type = load_type # 'IT' or 'Mech/House' - indicates which load type this component serves\n",
        "\n",
        "class Generator(Component):\n",
        "    def __init__(self, name, kw, kva, is_reserve=False, load_type='IT'):\n",
        "        super().__init__(name, 'Generator', kw, kva, is_reserve, load_type)\n",
        "\n",
        "class MDB(Component):\n",
        "    def __init__(self, name, kw=None, kva=None, is_reserve=False, load_type='IT'):\n",
        "        super().__init__(name, 'MDB', kw, kva, is_reserve, load_type) # MDBs might not have specific kW/kVA ratings at this level\n",
        "\n",
        "class UPS(Component):\n",
        "    def __init__(self, name, kw, kva, is_reserve=False, load_type='IT'):\n",
        "        super().__init__(name, 'UPS', kw, kva, is_reserve, load_type)\n",
        "\n",
        "class Rack(Component):\n",
        "    def __init__(self, name, is_reserve=False, load_type='IT'):\n",
        "        super().__init__(name, 'Rack', is_reserve=is_reserve, load_type=load_type) # Represents the final load point (IT racks or Mech/House panels)\n",
        "\n",
        "class Utility(Component):\n",
        "    def __init__(self, name, kw=None, kva=None, is_reserve=False, load_type='IT'):\n",
        "        super().__init__(name, 'Utility', kw, kva, is_reserve, load_type) # Represents the external utility power source\n",
        "\n",
        "# ----------------------------\n",
        "# Electrical System Class\n",
        "# ----------------------------\n",
        "class ElectricalSystem:\n",
        "    def __init__(self, topology, load_distribution):\n",
        "        self.topology = topology # Redundancy topology (e.g., \"N+1\", \"2N\")\n",
        "        self.load_distribution = load_distribution # How loads are distributed (\"included_in_it\" or \"separate_lineups\")\n",
        "        self.components = [] # List to store all components in the system\n",
        "        self.connections = [] # List to store connections between components (tuples of source, target)\n",
        "\n",
        "    def add_component(self, component):\n",
        "        \"\"\"Adds a component to the system.\"\"\"\n",
        "        self.components.append(component)\n",
        "\n",
        "    def connect(self, source, target):\n",
        "        \"\"\"Adds a connection between two components.\"\"\"\n",
        "        self.connections.append((source, target))\n",
        "\n",
        "    def summary(self):\n",
        "        \"\"\"Prints a summary of the electrical system components and connections.\"\"\"\n",
        "        print(f\"\\n===== Electrical System Summary =====\")\n",
        "        print(f\"Topology: {self.topology}\")\n",
        "        print(f\"Load Distribution: {self.load_distribution}\")\n",
        "        print(\"\\nComponents:\")\n",
        "        for c in self.components:\n",
        "            reserve_flag = \"Reserve\" if c.is_reserve else \"Main\"\n",
        "            rating_info = f\"KW={c.rating_kw}, KVA={c.rating_kva}\" if c.rating_kw is not None or c.rating_kva is not None else \"\"\n",
        "            print(f\"  - {c.name} ({c.type}, {c.load_type}, {reserve_flag}) {rating_info}\")\n",
        "        print(\"\\nConnections:\")\n",
        "        for s, t in self.connections:\n",
        "            print(f\"  {s.name} -> {t.name}\")\n",
        "        print(\"=======================================\")\n",
        "\n",
        "    def visualize(self):\n",
        "        \"\"\"Generates and displays a visualization of the electrical system using NetworkX and Matplotlib.\"\"\"\n",
        "        G = nx.DiGraph() # Create a directed graph\n",
        "        colors = [] # List to store node colors for visualization\n",
        "        node_labels = {} # Dictionary to store labels for graph nodes\n",
        "\n",
        "        # Add nodes and determine colors based on component type and status\n",
        "        for c in self.components:\n",
        "            G.add_node(c.name)\n",
        "            node_labels[c.name] = f\"{c.name}\\n({c.type})\\n({c.load_type})\" # Create a descriptive label for each node\n",
        "            if c.is_reserve:\n",
        "                colors.append('red') # Reserve components are red\n",
        "            elif c.load_type == 'Mech/House':\n",
        "                 colors.append('lightgreen') # Mechanical/House components are light green\n",
        "            else:\n",
        "                colors.append('skyblue') # IT components are sky blue\n",
        "\n",
        "        # Add edges based on connections\n",
        "        for s, t in self.connections:\n",
        "            G.add_edge(s.name, t.name)\n",
        "\n",
        "        # Arrange lineups for visualization layout\n",
        "        pos = {} # Dictionary to store node positions\n",
        "        it_x_offset = 0 # X-offset for positioning IT lineups\n",
        "        mech_house_x_offset = 0 # X-offset for positioning Mechanical/House lineups\n",
        "        y_spacing = 1.5 # Vertical spacing between components in a lineup\n",
        "\n",
        "        # Position IT lineups (Duty and Reserve)\n",
        "        for i in range(duty_lineups):\n",
        "            pos[f\"Utility{i+1}\"] = (it_x_offset - 0.7, 0)\n",
        "            pos[f\"G{i+1}\"]       = (it_x_offset + 0.7, 0)\n",
        "            pos[f\"MDB{i+1}\"]     = (it_x_offset, -y_spacing*1.5)\n",
        "            pos[f\"UPS{i+1}\"]     = (it_x_offset, -y_spacing*3)\n",
        "            pos[f\"Rack{i+1}\"]    = (it_x_offset, -y_spacing*4.5)\n",
        "            it_x_offset += 4 # Move to the right for the next lineup\n",
        "\n",
        "        # Position IT reserve lineups based on topology\n",
        "        if self.topology in [\"N+1\", \"N+2\"]:\n",
        "            pos[\"Utility_reserve\"] = (it_x_offset - 0.7, 0)\n",
        "            pos[\"G_reserve\"]       = (it_x_offset + 0.7, 0)\n",
        "            pos[\"MDB_reserve\"]     = (it_x_offset, -y_spacing*1.5)\n",
        "            pos[\"UPS_reserve\"]     = (it_x_offset, -y_spacing*3)\n",
        "            pos[\"Rack_reserve\"]    = (it_x_offset, -y_spacing*4.5)\n",
        "\n",
        "        elif self.topology in [\"2N\", \"2N+1\"]:\n",
        "            # In 2N and 2N+1, reserves are often paired with duty lineups or form separate paths.\n",
        "            # This positioning assumes reserve lineups are placed to the right of duty lineups.\n",
        "            current_it_reserve_x = it_x_offset\n",
        "            for i in range(duty_lineups):\n",
        "                pos[f\"Utility_reserve{i+1}\"] = (current_it_reserve_x - 0.7, 0)\n",
        "                pos[f\"G_reserve{i+1}\"]       = (current_it_reserve_x + 0.7, 0)\n",
        "                pos[f\"MDB_reserve{i+1}\"]     = (current_it_reserve_x, -y_spacing*1.5)\n",
        "                pos[f\"UPS_reserve{i+1}\"]     = (current_it_reserve_x, -y_spacing*3)\n",
        "                pos[f\"Rack_reserve{i+1}\"]    = (current_it_reserve_x, -y_spacing*4.5)\n",
        "                current_it_reserve_x += 4\n",
        "\n",
        "            # If 2N+1, add one extra reserve lineup\n",
        "            if self.topology == \"2N+1\":\n",
        "                pos[\"Utility_extra_reserve\"] = (current_it_reserve_x - 0.7, 0)\n",
        "                pos[\"G_extra_reserve\"]       = (current_it_reserve_x + 0.7, 0)\n",
        "                pos[\"MDB_extra_reserve\"]     = (current_it_reserve_x, -y_spacing*1.5)\n",
        "                pos[\"UPS_extra_reserve\"]     = (current_it_reserve_x, -y_spacing*3)\n",
        "                pos[\"Rack_extra_reserve\"]    = (current_it_reserve_x, -y_spacing*4.5)\n",
        "\n",
        "        # Position Mechanical/House lineups if separate\n",
        "        if self.load_distribution == \"separate_lineups\" and mech_house_total_lineups > 0:\n",
        "            mech_house_start_x = max(it_x_offset, current_it_reserve_x if self.topology in [\"2N\", \"2N+1\"] else it_x_offset) + 4 # Start positioning after IT lineups\n",
        "            mech_house_x_offset = mech_house_start_x\n",
        "            for i in range(mech_house_duty_lineups):\n",
        "                idx = i + 1\n",
        "                pos[f\"Mech_House_Utility{idx}\"] = (mech_house_x_offset - 0.7, 0)\n",
        "                pos[f\"Mech_House_G{idx}\"]       = (mech_house_x_offset + 0.7, 0)\n",
        "                pos[f\"Mech_House_MDB{idx}\"]     = (mech_house_x_offset, -y_spacing*1.5)\n",
        "                # Mech/House loads might not have UPS/Batteries, assuming direct feed to load point\n",
        "                pos[f\"Mech_House_Load{idx}\"]    = (mech_house_x_offset, -y_spacing*3) # Represent as a generic load point\n",
        "                mech_house_x_offset += 4\n",
        "\n",
        "            # Position Mech/House reserve lineups (assuming N+1 for Mech/House)\n",
        "            if mech_house_total_lineups > mech_house_duty_lineups: # Check if there are reserve lineups\n",
        "                 pos[\"Mech_House_Utility_reserve\"] = (mech_house_x_offset - 0.7, 0)\n",
        "                 pos[\"Mech_House_G_reserve\"]       = (mech_house_x_offset + 0.7, 0)\n",
        "                 pos[\"Mech_House_MDB_reserve\"]     = (mech_house_x_offset, -y_spacing*1.5)\n",
        "                 pos[\"Mech_House_Load_reserve\"]    = (mech_house_x_offset, -y_spacing*3)\n",
        "\n",
        "\n",
        "        # Plot the graph\n",
        "        plt.figure(figsize=(max(it_x_offset, mech_house_x_offset) + 4, 10)) # Adjust figure size based on number of lineups\n",
        "        nx.draw(G, pos, with_labels=False, node_size=3000, node_color=colors, font_size=10, arrows=True)\n",
        "        nx.draw_networkx_labels(G, pos, labels=node_labels, font_size=9) # Use node_labels for better display\n",
        "        plt.title(f\"Electrical System Diagram ({self.topology}, {self.load_distribution})\")\n",
        "        plt.show()\n",
        "\n",
        "\n",
        "# ----------------------------\n",
        "# Build System Function\n",
        "# ----------------------------\n",
        "def build_electrical_system(dc_calc_results):\n",
        "    \"\"\"Builds the electrical system graph based on calculation results.\"\"\"\n",
        "    system = ElectricalSystem(topology=dc_calc_results.topology, load_distribution=dc_calc_results.load_distribution)\n",
        "\n",
        "    # Main duty IT lineups\n",
        "    for i in range(dc_calc_results.duty_lineups):\n",
        "        idx = i + 1\n",
        "        # Use calculated ratings from dc_calc_results\n",
        "        utility = Utility(f\"Utility{idx}\", dc_calc_results.total_kva, dc_calc_results.total_current, load_type='IT')\n",
        "        gen = Generator(f\"G{idx}\", dc_calc_results.generator_kw_per_unit, dc_calc_results.generator_kva_per_unit, load_type='IT')\n",
        "        mdb = MDB(f\"MDB{idx}\", load_type='IT')\n",
        "        ups = UPS(f\"UPS{idx}\", dc_calc_results.ups_kw_per_unit, dc_calc_results.ups_kva_per_unit, load_type='IT')\n",
        "        rack = Rack(f\"Rack{idx}\", load_type='IT')\n",
        "\n",
        "        for c in [utility, gen, mdb, ups, rack]:\n",
        "            system.add_component(c)\n",
        "\n",
        "        system.connect(utility, mdb)\n",
        "        system.connect(gen, mdb)\n",
        "        system.connect(mdb, ups)\n",
        "        system.connect(ups, rack)\n",
        "\n",
        "    # IT Reserve lineups\n",
        "    if dc_calc_results.topology in [\"N+1\", \"N+2\"]:\n",
        "        reserve_utility = Utility(\"Utility_reserve\", dc_calc_results.total_kva, dc_calc_results.total_current, is_reserve=True, load_type='IT')\n",
        "        reserve_gen = Generator(\"G_reserve\", dc_calc_results.generator_kw_per_unit, dc_calc_results.generator_kva_per_unit, is_reserve=True, load_type='IT')\n",
        "        reserve_mdb = MDB(\"MDB_reserve\", is_reserve=True, load_type='IT')\n",
        "        reserve_ups = UPS(\"UPS_reserve\", dc_calc_results.ups_kw_per_unit, dc_calc_results.ups_kva_per_unit, is_reserve=True, load_type='IT')\n",
        "        reserve_rack = Rack(\"Rack_reserve\", is_reserve=True, load_type='IT')\n",
        "\n",
        "        for c in [reserve_utility, reserve_gen, reserve_mdb, reserve_ups, reserve_rack]:\n",
        "            system.add_component(c)\n",
        "\n",
        "        system.connect(reserve_utility, reserve_mdb)\n",
        "        system.connect(reserve_gen, reserve_mdb)\n",
        "        system.connect(reserve_mdb, reserve_ups)\n",
        "        system.connect(reserve_ups, reserve_rack)\n",
        "\n",
        "    elif dc_calc_results.topology in [\"2N\", \"2N+1\"]:\n",
        "        for i in range(dc_calc_results.duty_lineups):\n",
        "            idx = i + 1\n",
        "            r_utility = Utility(f\"Utility_reserve{idx}\", dc_calc_results.total_kva, dc_calc_results.total_current, is_reserve=True, load_type='IT')\n",
        "            r_gen = Generator(f\"G_reserve{idx}\", dc_calc_results.generator_kw_per_unit, dc_calc_results.generator_kva_per_unit, is_reserve=True, load_type='IT')\n",
        "            r_mdb = MDB(f\"MDB_reserve{idx}\", is_reserve=True, load_type='IT')\n",
        "            r_ups = UPS(f\"UPS_reserve{idx}\", dc_calc_results.ups_kw_per_unit, dc_calc_results.ups_kva_per_unit, is_reserve=True, load_type='IT')\n",
        "            r_rack = Rack(f\"Rack_reserve{idx}\", is_reserve=True, load_type='IT')\n",
        "\n",
        "            for c in [r_utility, r_gen, r_mdb, r_ups, r_rack]:\n",
        "                system.add_component(c)\n",
        "\n",
        "            system.connect(r_utility, r_mdb)\n",
        "            system.connect(r_gen, r_mdb)\n",
        "            system.connect(r_mdb, r_ups)\n",
        "            system.connect(r_ups, r_rack)\n",
        "\n",
        "        if dc_calc_results.topology == \"2N+1\":\n",
        "            r_utility = Utility(\"Utility_extra_reserve\", dc_calc_results.total_kva, dc_calc_results.total_current, is_reserve=True, load_type='IT')\n",
        "            r_gen = Generator(\"G_extra_reserve\", dc_calc_results.generator_kw_per_unit, dc_calc_results.generator_kva_per_unit, is_reserve=True, load_type='IT')\n",
        "            r_mdb = MDB(\"MDB_extra_reserve\", is_reserve=True, load_type='IT')\n",
        "            r_ups = UPS(\"UPS_extra_reserve\", dc_calc_results.ups_kw_per_unit, dc_calc_results.ups_kva_per_unit, is_reserve=True, load_type='IT')\n",
        "            r_rack = Rack(\"Rack_extra_reserve\", is_reserve=True, load_type='IT')\n",
        "\n",
        "            for c in [r_utility, r_gen, r_mdb, r_ups, r_rack]:\n",
        "                system.add_component(c)\n",
        "\n",
        "            system.connect(r_utility, r_mdb)\n",
        "            system.connect(r_gen, r_mdb)\n",
        "            system.connect(r_mdb, r_ups)\n",
        "            system.connect(r_ups, r_rack)\n",
        "\n",
        "\n",
        "    # Separate Mechanical/House lineups\n",
        "    if dc_calc_results.load_distribution == \"separate_lineups\" and dc_calc_results.mech_house_total_lineups > 0:\n",
        "\n",
        "        # Duty Mech/House lineups\n",
        "        for i in range(dc_calc_results.mech_house_duty_lineups):\n",
        "            idx = i + 1\n",
        "            mh_utility = Utility(f\"Mech_House_Utility{idx}\", dc_calc_results.mech_house_total_kva, dc_calc_results.mech_house_total_current, load_type='Mech/House')\n",
        "            mh_gen = Generator(f\"Mech_House_G{idx}\", dc_calc_results.mech_house_gen_kw_per_unit, dc_calc_results.mech_house_gen_kva_per_unit, load_type='Mech/House')\n",
        "            mh_mdb = MDB(f\"Mech_House_MDB{idx}\", load_type='Mech/House')\n",
        "            # Assuming no UPS for Mech/House for this simplified model, direct feed to Load\n",
        "            mh_load = Rack(f\"Mech_House_Load{idx}\", load_type='Mech/House') # Represent as a generic load point\n",
        "\n",
        "            for c in [mh_utility, mh_gen, mh_mdb, mh_load]:\n",
        "                 system.add_component(c)\n",
        "\n",
        "            system.connect(mh_utility, mh_mdb)\n",
        "            system.connect(mh_gen, mh_mdb)\n",
        "            system.connect(mh_mdb, mh_load)\n",
        "\n",
        "        # Reserve Mech/House lineups (assuming N+1 for Mech/House)\n",
        "        if dc_calc_results.mech_house_total_lineups > dc_calc_results.mech_house_duty_lineups: # Check if there are reserve lineups\n",
        "            mh_reserve_utility = Utility(\"Mech_House_Utility_reserve\", dc_calc_results.mech_house_total_kva, dc_calc_results.mech_house_total_current, is_reserve=True, load_type='Mech/House')\n",
        "            mh_reserve_gen = Generator(\"Mech_House_G_reserve\", dc_calc_results.mech_house_gen_kw_per_unit, dc_calc_results.mech_house_gen_kva_per_unit, is_reserve=True, load_type='Mech/House')\n",
        "            mh_reserve_mdb = MDB(\"Mech_House_MDB_reserve\", is_reserve=True, load_type='Mech/House')\n",
        "            mh_reserve_load = Rack(\"Mech_House_Load_reserve\", is_reserve=True, load_type='Mech/House')\n",
        "\n",
        "            for c in [mh_reserve_utility, mh_reserve_gen, mh_reserve_mdb, mh_reserve_load]:\n",
        "                 system.add_component(c)\n",
        "\n",
        "            system.connect(mh_reserve_utility, mh_reserve_mdb)\n",
        "            system.connect(mh_reserve_gen, mh_reserve_mdb)\n",
        "            system.connect(mh_reserve_mdb, mh_reserve_load)\n",
        "\n",
        "    return system\n",
        "\n",
        "\n",
        "# ----------------------------\n",
        "# Main Execution for Visualization\n",
        "# ----------------------------\n",
        "# Build the electrical system graph based on the results from the calculations cell\n",
        "try:\n",
        "    # Ensure dc_calc_results is available from the previous cell\n",
        "    if 'dc_calc_results' in globals():\n",
        "         electrical_system = build_electrical_system(dc_calc_results)\n",
        "\n",
        "         # Summary & Visualization\n",
        "         electrical_system.summary()\n",
        "         electrical_system.visualize()\n",
        "    else:\n",
        "         print(\"Error: Data center calculation results not found. Please run the previous cell first.\")\n",
        "\n",
        "except NameError as e:\n",
        "    print(f\"Error: Missing variables from previous cells. Please ensure all preceding cells are executed. Error: {e}\")"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== Electrical System Summary =====\n",
            "Topology: N+1\n",
            "Load Distribution: included_in_it\n",
            "\n",
            "Components:\n",
            "  - Utility1 (Utility, IT, Main) KW=6842.105263157895, KVA=9875.728288769915\n",
            "  - G1 (Generator, IT, Main) KW=2383.3333333333335, KVA=2979.1666666666665\n",
            "  - MDB1 (MDB, IT, Main) \n",
            "  - UPS1 (UPS, IT, Main) KW=2383.3333333333335, KVA=2508.7719298245615\n",
            "  - Rack1 (Rack, IT, Main) \n",
            "  - Utility2 (Utility, IT, Main) KW=6842.105263157895, KVA=9875.728288769915\n",
            "  - G2 (Generator, IT, Main) KW=2383.3333333333335, KVA=2979.1666666666665\n",
            "  - MDB2 (MDB, IT, Main) \n",
            "  - UPS2 (UPS, IT, Main) KW=2383.3333333333335, KVA=2508.7719298245615\n",
            "  - Rack2 (Rack, IT, Main) \n",
            "  - Utility3 (Utility, IT, Main) KW=6842.105263157895, KVA=9875.728288769915\n",
            "  - G3 (Generator, IT, Main) KW=2383.3333333333335, KVA=2979.1666666666665\n",
            "  - MDB3 (MDB, IT, Main) \n",
            "  - UPS3 (UPS, IT, Main) KW=2383.3333333333335, KVA=2508.7719298245615\n",
            "  - Rack3 (Rack, IT, Main) \n",
            "  - Utility_reserve (Utility, IT, Reserve) KW=6842.105263157895, KVA=9875.728288769915\n",
            "  - G_reserve (Generator, IT, Reserve) KW=2383.3333333333335, KVA=2979.1666666666665\n",
            "  - MDB_reserve (MDB, IT, Reserve) \n",
            "  - UPS_reserve (UPS, IT, Reserve) KW=2383.3333333333335, KVA=2508.7719298245615\n",
            "  - Rack_reserve (Rack, IT, Reserve) \n",
            "\n",
            "Connections:\n",
            "  Utility1 -> MDB1\n",
            "  G1 -> MDB1\n",
            "  MDB1 -> UPS1\n",
            "  UPS1 -> Rack1\n",
            "  Utility2 -> MDB2\n",
            "  G2 -> MDB2\n",
            "  MDB2 -> UPS2\n",
            "  UPS2 -> Rack2\n",
            "  Utility3 -> MDB3\n",
            "  G3 -> MDB3\n",
            "  MDB3 -> UPS3\n",
            "  UPS3 -> Rack3\n",
            "  Utility_reserve -> MDB_reserve\n",
            "  G_reserve -> MDB_reserve\n",
            "  MDB_reserve -> UPS_reserve\n",
            "  UPS_reserve -> Rack_reserve\n",
            "=======================================\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
